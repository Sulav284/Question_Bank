
    <html>
    <head>
        <meta charset="UTF-8">
        <title>CDC Question Bank 2076 2076</title>
    </head>
    <body>
        <h1>CDC Question Bank 2076 - 2076</h1>
        <p><strong>Full Marks:</strong> 60 + 20 + 20</p>
        <p><strong>Pass Marks:</strong> 24 + 8 + 8</p>
        <p><strong>Time:</strong> 3 hours</p>
    <h2>Section A: Attempt all question.</h2><h3>Question 1</h3>
<div><p><p>Explain briefly about different phases involved in compiler, with a block diagram</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone wp-image-36712 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/CDC-qn-1-.drawio.png?resize=711%2C423&#038;ssl=1" alt="" width="711" height="423"></p>
<p style="text-align: center;">fig: Block diagram of phases of compiler</p>
<p>Following are the phases of compiler:</p>
<p>1. Lexical Anlysis :</p>
<p>Lexical analysis is the process where rge source program is read from left to right and grouped into tokens.</p>
<p>eg:</p>
<p>while (i &gt; 0)</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%;">
<tbody>
<tr>
<td style="width: 50%; text-align: center;">Token</td>
<td style="width: 50%; text-align: center;">Description</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">while</td>
<td style="width: 50%; text-align: center;">Keyword</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">(</td>
<td style="width: 50%; text-align: center;">Left parenthesis</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">i</td>
<td style="width: 50%; text-align: center;">identifier</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">&gt;</td>
<td style="width: 50%; text-align: center;">greater than symbol</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">0</td>
<td style="width: 50%; text-align: center;">integer constant</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">)</td>
<td style="width: 50%; text-align: center;">right parenthesis</td>
</tr>
</tbody>
</table></div>
<p>2. Syntatic Anlysis :</p>
<p>Here, it checks if arrangement of tokens follows grammar rules of programming language. It creates the syntatic structure of the given source program.</p>
<p>eg: new_val = old_val + 12.</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="wp-image-36713 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/syntatic-of-CDC.drawio.png?resize=412%2C394&#038;ssl=1" alt="" width="412" height="394"></p>
<p>3. Semantic Anlysis :</p>
<p>It performs a very importantrole to check the semantic rules of the expression according to the source language. It is required when the compilee may require performing some additional checks.</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="wp-image-36714 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/semantic-analysis.drawio.png?resize=376%2C264&#038;ssl=1" alt="" width="376" height="264"></p>
<p>4. Intermediate Code generator :</p>
<p>It generates a simple machine independent intermediate language. It should be generated in such a way that it can be easily translated into target machine code.</p>
<p>eg:      A =b+c*d/f</p>
<p>intermediate code for above expression will be:</p>
<p>T1 = c*d</p>
<p>T2 = T1/f</p>
<p>T3 = b+T2</p>
<p>A = T3</p>
<p>5.  Code Optimization:</p>
<p>It is the process of removing unnecessary part of a code. It decreases the time ad space complexity of program.</p>
<p>eg:</p>
<p>Before code optimization</p>
<p>b = 0</p>
<p>T1 = a+b</p>
<p>T2= c*T1</p>
<p>a = T2</p>
<p>After code optimization</p>
<p>b = 0</p>
<p>a = c*a</p>
<p>6. Code generator:</p>
<p>It generates the assembly code for the target CPU from an optimized intermediate representation of program.</p>
<p>eg:</p>
<p>A = b+c*d/f</p>
<p>MOV c,R1</p>
<p>MOV d,R1</p>
<p>MOV f,R1</p>
<p>MOV b,R1</p>
<p>MOV R1,A</p>
<p>&nbsp;</p>
</div>
<h3>Question 2</h3>
<div><p><p>Given a regular expression (ε + 0)*10. Construct the DFA recognizing the pattern described by this regular expression using syntax<br />
tree based reduction.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>given regular expression</p>
<p>(ε + 0)* 10</p>
<p><strong>1. The augmented  R.E of given R.E is</strong></p>
<p>(ε + 0)* 10#</p>
<p><strong>2. Syntax tree of above R.E is</strong></p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-36759 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/WhatsApp-Image-2024-05-27-at-4.16.44-PM.jpeg?resize=535%2C435&#038;ssl=1" alt="" width="535" height="435"></p>
<p><strong>3. Compute followpos</strong></p>
<p>followpos (1) = {1,2}</p>
<p>followpos (2) = {3}</p>
<p>followpos (3) = {4}</p>
<p>followpos (4) = Φ</p>
<p><strong>4. Creare DFA for R.E</strong></p>
<p>Starting state of DFA = firstpos(root)</p>
<p>={1,2}</p>
<p>=s<sub>0</sub></p>
<p><em>for s<sub>0 </sub>= {1,2}</em></p>
<p>for 0: followpos (1) = {1,2} = s<sub>0</sub></p>
<p>for 1: followpos (2) = {3} = s<sub>1</sub></p>
<p>&nbsp;</p>
<p><em>for s<sub>1 </sub>= {3}</em></p>
<p>for 0: followpos (3) = {4} = s<sub>2</sub></p>
<p>for 1: followpos (4) = {Φ} = s<sub>3</sub></p>
<p>&nbsp;</p>
<p><em>for s<sub>2 </sub>= {4}</em></p>
<p>for 0: followpos (Φ) = {Φ} = s<sub>3</sub></p>
<p>for 0: followpos (Φ) = {Φ} = s<sub>3</sub></p>
<p>&nbsp;</p>
<p><em>for s<sub>3 </sub>= {Φ}</em></p>
<p>for 0: followpos (Φ) = {Φ} = s<sub>3</sub></p>
<p>for 0: followpos (Φ) = {Φ} = s<sub>3</sub></p>
<p>&nbsp;</p>
<p>final state is s<sub>2 </sub>as it contains #</p>
<p style="text-align: center;"><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone wp-image-36718" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/dfa-for-CDC.drawio.png?resize=344%2C272&#038;ssl=1" alt="" width="344" height="272"></p>
</div>
<h3>Question 3</h3>
<div><p><p>What is shift reduce parsing techniques? Show shift reduce parsing action for the string (x+x)*a, given the grammar</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Shift Reduced Parsing is a type of buttom-up parsing method used in syntax analysis which is a part of the compiler design process. It uses a stack to hold the grammar symbol and an input buffer to hold the input string w.</p>
<p>This technique involves two primary operations i.e shift and reduced.</p>
<ul style="list-style-type: square;">
<li>Shift : The parser reads the next input symbol and pushes it onto the stack.</li>
<li>Reduce: The parser applies a production rule in reverse, replacing a sequence of symbol on the stack with the non-terminal on the left-hand side of the production.</li>
</ul>
<p>Now,</p>
<p>given string :  (x+x)*a</p>
<p>given grammar :  S → S+S | S*S | (S) | X</p>
<p>Shift reduce parsing action is shown in table below:</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-36726 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/shift-reduced.drawio.png?resize=665%2C681&#038;ssl=1" alt="" width="665" height="681"></p>
</div>
<h3>Question 4</h3>
<div><p><p>Construct SLR parsing table for the following grammar.<br />
S -> aAa | bAb | ba</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style></div>
<h3>Question 5</h3>
<div><p><p>Define Syntax directed definition. Construct annotated parse tree for the input expression (5*3+2)*5 according to the following<br />
syntax directed definition.</p>
<p><img loading="lazy" decoding="async" class="alignnone size-full wp-image-20633" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2023/07/Screenshot-2023-07-16-150843.png?resize=459%2C272&ssl=1" alt="- Hamro CSIT" width="459" height="272" data-recalc-dims="1" /></p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>SDD i.e Syntax Directed Defination is a formal way to specify the syntax and symantic of a programming language. It is a context-free grammar togetherwith attributes and rules.</p>
<p>for eg:</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%;">
<tbody>
<tr>
<td style="width: 50%; text-align: center;">Production</td>
<td style="width: 50%; text-align: center;">Semantic Rules</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">E → T</td>
<td style="width: 50%; text-align: center;">E.val = T.val</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">T → T<sub>1 </sub>* F</td>
<td style="width: 50%; text-align: center;">T.val = T<sub>1</sub>.val * F.val</td>
</tr>
</tbody>
</table></div>
<p>The annoted parse trees for input expression:</p>
<p>(5*3+2)*5</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-36760" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/annoted-parse-tree.drawio.png?resize=710%2C750&#038;ssl=1" alt="" width="710" height="750"></p>
<p style="text-align: center;">fig : Annoted parse tree for expression (5*3+2)*5</p>
</div>
<h3>Question 6</h3>
<div><p><p>Write Syntax Directed Definition to carry out type checking for the following expression.<br />
E -> id | E1 op E2 | E1 relop E2 | E1[E2] | E1 ↑</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>given expression</p>
<p>E → id | E1 op E2 | E1 relop E2 | E1[E2] | E1 ↑</p>
<p>1. E → id</p>
<ul style="list-style-type: square;">
<li>  E type = lookup (id.entry)</li>
</ul>
<p>2. E → E1 op E2</p>
<ul style="list-style-type: square;">
<li>  if E<sub>1 </sub>. type == E<sub>2 </sub>. type and E<sub>1 </sub>. type in {int, float} then E<sub> </sub>. type = E<sub>1 </sub>. type</li>
<li> E<sub> </sub>. type = type &#8211; error</li>
</ul>
<p>3. E → E1 relop E2</p>
<ul style="list-style-type: square;">
<li>  if E<sub>1 </sub>. type == E<sub>2 </sub>. type and E<sub>1 </sub>. type in {int, float} then E<sub> </sub>. type = bool</li>
<li> E<sub> </sub>. type = error</li>
</ul>
<p>4. E → E1[E2]</p>
<ul style="list-style-type: square;">
<li> if E<sub>1 </sub>. type == array and E<sub>2 </sub>. type == int then E<sub> </sub>. type = E<sub>1</sub><sub> </sub>. type.element_type</li>
<li> E<sub> </sub>. type = type &#8211; error</li>
</ul>
<p>5. E → E1 ↑</p>
<ul style="list-style-type: square;">
<li>if E<sub>1 </sub>. type == pointer then E<sub> </sub>. type = E<sub>1</sub><sub> </sub>. type.pointed_type</li>
<li> E<sub> </sub>. type = type &#8211; error</li>
</ul>
</div>
<h3>Question 7</h3>
<div><p><p>Explain with example about different methods of intermediate code representation.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Intermediate code representation is an important aspect of compiler design that bridges the gap between high-level source code and low-level machine code. It allows for optimization and transformation that improves the effeciency and performance of final generated code.</p>
<p>Method of intermediate code representation are:</p>
<ul style="list-style-type: square;">
<li>Graphical representation</li>
<li>Prefix notation</li>
<li>Three address code</li>
</ul>
<p>a. <span style="text-decoration: underline;"><strong>Graphical representation</strong></span> (syntax tree and DAG) :</p>
<ul style="list-style-type: square;">
<li>Syntax tree are tree representation of the syntatic structure of source code. Each node represents a construct occouring in the source code. eg: for expression: a = b+c*d syntax tree is :</li>
</ul>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-36763 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/syntax-tree.drawio.png?resize=280%2C250&#038;ssl=1" alt="" width="280" height="250"></p>
<p style="text-align: center;">fig: syntax tree</p>
<ul style="list-style-type: square;">
<li>DAG (Directed Acyclic Graph) is used to represent expression and optimize computations by eliminatry common sub-expression. For eg : DAG for expression a+a*(b-c)+(b-c)*d</li>
</ul>
<p style="text-align: center;"><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-36766" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2024/05/DAG.drawio.png?resize=381%2C320&#038;ssl=1" alt="" width="381" height="320"></p>
<p style="text-align: center;">fig: DAG</p>
<p>&nbsp;</p>
<p>b. <span style="text-decoration: underline;"><strong>Prefix notation</strong></span>:</p>
<p>It is a linearized representation of syntax tree, it is a list of nodes of trees in which a node appears immediately after its children.</p>
<p>For eg: (a+b)*c</p>
<ul style="list-style-type: square;">
<li> Postfix notation = ab +c*</li>
</ul>
<p>a*(b+c)</p>
<ul style="list-style-type: square;">
<li>Postfix notation = abc+*</li>
</ul>
<p>c. <span style="text-decoration: underline;"><strong>Three-Address code</strong> </span>:</p>
<p>It is a type of intermediate representation that uses a sequence of instructions, each typically involving at most three address (two operands and one result).</p>
<p>Format :</p>
<p>x=y op z</p>
<p>where,</p>
<p style="text-align: center;">x,y,z = variable</p>
<p style="text-align: center;">op = operator</p>
<p>for eg : Expression x+y*z</p>
<p>Three address code representation:</p>
<p style="text-align: center;">t1 = y*z</p>
<p style="text-align: center;">t2 = x+t1</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<h3>Question 8</h3>
<div><p><p>What is the purpose of code optimization? Explain different types of loop optimization techniques with example.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>It is the process of improving the efficiency of code by making it run faster consume less memory, or use lower resources while preserving the original functionality and output.</p>
<p>Purpose of code optimization are as follow:</p>
<ul style="list-style-type: square;">
<li>Optimized code has faster execution speed.</li>
<li>Optimized code utilizes the memory efficiency.</li>
<li>Optimized code gives better performance.</li>
</ul>
<p>Loop optimized technique types are given below:</p>
<p>a. <span style="text-decoration: underline;"><strong>Code Motion / Frequency Reduction / Loop invarient code optimization</strong></span>:</p>
<p>It is a technique which moves the code outside the loop without affecting the semantics of the program.</p>
<p>for eg:</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%; height: 132px;">
<tbody>
<tr style="height: 12px;">
<td style="width: 50%; text-align: center; height: 12px;"><strong>Before Optimization</strong></td>
<td style="width: 50%; text-align: center; height: 12px;"><strong>After Optimization</strong></td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">while (i&lt;100)</td>
<td style="width: 50%; text-align: center; height: 24px;">t = sin(A) * cos(A);</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">{</td>
<td style="width: 50%; text-align: center; height: 24px;">while (i&lt;100)</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">x = i*sin(A)*cos(A)</td>
<td style="width: 50%; text-align: center; height: 24px;">{</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">}</td>
<td style="width: 50%; text-align: center; height: 24px;">x = i* t;</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;"></td>
<td style="width: 50%; text-align: center; height: 24px;">}</td>
</tr>
</tbody>
</table></div>
<p>b. <span style="text-decoration: underline;"><strong>Loop jamming / Loop fusion</strong></span>:</p>
<p>In this method several loops are merged to one loop. For eg:</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%; height: 90px;">
<tbody>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;"><strong>Before Optimization</strong></td>
<td style="width: 50%; text-align: center; height: 24px;"><strong>After Optimization</strong></td>
</tr>
<tr style="height: 18px;">
<td style="width: 50%; text-align: center; height: 18px;">for i = 1 to n do</td>
<td style="width: 50%; text-align: center; height: 18px;">for i = 1 to n *m do</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">for j = 1 to m do</td>
<td style="width: 50%; text-align: center; height: 24px;">a[i] = 10</td>
</tr>
<tr style="height: 24px;">
<td style="width: 50%; text-align: center; height: 24px;">a[i,j] = 10</td>
<td style="width: 50%; text-align: center; height: 24px;"></td>
</tr>
</tbody>
</table></div>
<p>c. <span style="text-decoration: underline;"><strong>Loop unrolling</strong></span>:</p>
<p>In this technique, the number of jumps and tests can be reduced by writting code two times. For eg:</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%;">
<tbody>
<tr>
<td style="width: 50%; text-align: center;"><strong>Before Optimization</strong></td>
<td style="width: 50%; text-align: center;"><strong>After Optimization</strong></td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">int i = 1;</td>
<td style="width: 50%; text-align: center;">int i = 1;</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">while (i&lt;=100)</td>
<td style="width: 50%; text-align: center;">while (i&lt;=100)</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">{</td>
<td style="width: 50%; text-align: center;">{</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">a[i] = b[i];</td>
<td style="width: 50%; text-align: center;">a[i] = b[i];</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">i++;</td>
<td style="width: 50%; text-align: center;">i++;</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">}</td>
<td style="width: 50%; text-align: center;">a[i] = b[i];</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;"></td>
<td style="width: 50%; text-align: center;">i++;</td>
</tr>
<tr>
<td style="width: 50%;"></td>
<td style="width: 50%; text-align: center;">}</td>
</tr>
</tbody>
</table></div>
<p>&nbsp;</p>
</div>
<h3>Question 9</h3>
<div><p><p>Discuss about the different factors affecting target code generation.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Target code genration the process of translating an intermediate representation (IR) or high-level language into machine code or a lower &#8211; level representation.</p>
<p>Here&#8217;s are the different factors affecting target  code generation.</p>
<ol style="list-style-type: lower-alpha;">
<li><span style="text-decoration: underline;"><em>Architecture</em></span> : Target code generation is influenced by the specific hardware architecture and its features.</li>
<li><span style="text-decoration: underline;"><em>Calling convention</em></span> : Code generation must adhere to rules for parametor passing , return values , interaperability between modules.</li>
<li><em><span style="text-decoration: underline;">Optimization goals</span></em> :Depending on priorities like speed , size , or energy efficiency , the compiler applies different optmization technique , during code generation.</li>
<li><em><span style="text-decoration: underline;">Intruction selection</span></em> :Choosing appropriate machine instruction based on the available instrction set , addressing modes , and  optimization goals is crucial.</li>
<li><em><span style="text-decoration: underline;">Data representation</span></em> :Optimizing memory access patterns , data size , and alignment affects code efficiency.</li>
<li><em><span style="text-decoration: underline;">Control flow</span></em> : Handling control flow constructs like loops and conditionals efficiently improves code performance.</li>
</ol>
</div>
<h3>Question 10</h3>
<div><p><p>Discuss the importance of error handler in compiler. How is it manipulated in the different phases of compilation?</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Importance of error handler in compiler</p>
<ol style="list-style-type: lower-alpha;">
<li><span style="text-decoration: underline;">Error detection</span> : Identifying mistakes that the violate syntax, semantic or other constraints of the programming language.</li>
<li><span style="text-decoration: underline;">Error reporting</span> : Informing the programmer about the nature and location of errors with clear and helpful messages.</li>
<li><span style="text-decoration: underline;">Error recovery</span> : Allowing the compiler to continue processing and analysing the remaining code after encountering an error, instead of terminating permaturely.</li>
</ol>
<p>Manipulation of error handler in different phases of compilation.</p>
<p><strong>Lexical analysis</strong> :</p>
<ul style="list-style-type: square;">
<li><em>Error Types</em> : Invalid character unterminated strings, incorrect tokens.</li>
<li><em>Error Handling</em> : Skips invalid characters issues error messages, continues with next valid tokens.</li>
</ul>
<p><strong>Syntax Analysis</strong> :</p>
<ul style="list-style-type: square;">
<li><em>Error Types</em> : Syntax error like missing semicolon unbalanced parenthesis, incorrect statement structure.</li>
<li><em>Error Handling</em> : User panic mode, phrase-level recovery, and error production to recover and continue parsing.</li>
</ul>
<p><strong>Semantic Analysis</strong> :</p>
<ul style="list-style-type: square;">
<li><em>Error types</em> : Type mismatches ,undeclared variables,invalid type casts,scope errors</li>
<li><em>Error handling</em> : Uses symbol tables and type information to check consistency</li>
</ul>
<p><strong>Intermediate code generator</strong>:</p>
<ul style="list-style-type: square;">
<li><em>Error Types</em> : Error in intermediate representation like invalid operations for a given types incorrect address.</li>
<li><em>Error handling</em> : Ensures intermediate code  contraning are met and report issue affecting further compilation stages.</li>
</ul>
<p><strong>Code optimization</strong>:</p>
<ul style="list-style-type: square;">
<li><em>Error Types</em> :Invald transformation that alter program semantics</li>
<li><em>Error handling</em> :Validates transformations preserv original behavior and handles internal errors for correct optimization</li>
</ul>
<p><strong>Code generation</strong>:</p>
<ul style="list-style-type: square;">
<li><em>Error Types</em> :Machine- level errors like invalid machine code instruction , register allocation issues</li>
<li><em>Error handling</em> : Ensures machine code correctness and efficiency,addressing errors from earlier phases</li>
</ul>
<p>&nbsp;</p>
</div>
</body></html>