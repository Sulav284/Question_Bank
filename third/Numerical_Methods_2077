
    <html>
    <head>
        <meta charset="UTF-8">
        <title>NM Question Bank 2077 2077</title>
    </head>
    <body>
        <h1>NM Question Bank 2077 - 2077</h1>
        <p><strong>Full Marks:</strong> 60 + 20 + 20</p>
        <p><strong>Pass Marks:</strong> 24 + 8 + 8</p>
        <p><strong>Time:</strong> 3 hours</p>
    <h2>Group A: Attempt any Two questions:(10 x 2 = 20)

</h2><h3>Question 1</h3>
<div><p><p>Derive the formula for Newton Raphson Method. Solve the equation \(x^2 + 4x – 9 = 0\) using Newton Raphson method. Assume error precision is 0.01. Discuss drawbacks of the Newton Raphson method.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>The formula for Newton-Rapson method is</p>
<p>\(x_{n + 1} = x_n &#8211; \frac{f(x_n)}{f'(x_n)}\)</p>
<p>We have to derive this formula</p>
<p><strong>Derivation:</strong></p>
<p>Let h is an small increment in x<sub>n</sub> to get next estimate of root</p>
<p>\(x_{n+1} &#8211; x_0 = h\)</p>
<p>\(x_{n+1} = x_n + h\)</p>
<p>We know that Taylors series can be written as</p>
<p>\(f(x+h) = f(x) + \frac{f'(x)h}{1!} + \frac{f&#8221;(x)h^2}{2!} + &#8230;&#8230;\)</p>
<p>Since h is very small, We can neglet the terms containing second and higher order terms. Then above equation can be written as:</p>
<p>\(f(x+h) = f(x) + \frac{f'(x)h}{1!}\)</p>
<p>\(f(x_n+h) = f(x_n) + \frac{f'(x_n)h}{1!}\)</p>
<p>\(f(x_{n+1}) = f(x_n) + \frac{f'(x_n)(x_{n+1} &#8211; x_n)}{1!}\)</p>
<p>If x<sub>n+1</sub> is root of the given polynomail</p>
<p>f(x<sub>n+1</sub>) = 0</p>
<p>\(f(x_n) + \frac{f'(x_n)(x_{n+1} &#8211; x_n)}{1!} = 0\)</p>
<p>Solving above equation to get the value of x<sub>n+1</sub> we get</p>
<p>\(x_{n + 1} = x_n &#8211; \frac{f(x_n)}{f'(x_n)}\)</p>
<p>This is the equation of Newton Raphson formula.</p>
<p>&nbsp;</p>
<p><strong>Problem Part:</strong></p>
<p>Solution:</p>
<p>Let f(x) = x<sup>2</sup> + 4x &#8211; 9</p>
<p>f'(x) = 2x + 4</p>
<p>Let us assume initial guess is 4</p>
<p><strong>Iteration 1:</strong></p>
<p>x<sub>0</sub> = 4</p>
<p>f(x<sub>0</sub>) = f(4) = 16 + 16 &#8211; 9 = 23</p>
<p>f'(x<sub>0</sub>) = f'(4) = 8 + 4 = 12</p>
<p>\(x_1 = x_0 &#8211; \frac{f(x_0)}{f'(x_0)}\)</p>
<p>x<sub>1</sub> = 2.0833</p>
<p>Error = \(\left | \frac{x_1 &#8211; x_0}{x_1} \right |\) = 0.92</p>
<p><strong>Iteration 2:</strong></p>
<p>f(x<sub>1</sub>) = 3.673</p>
<p>f'(x<sub>1</sub>) = 8.166</p>
<p>x<sub>2</sub> = 1.633</p>
<p>Error = 0.275</p>
<p><strong>Iteration 3:</strong></p>
<p>f(x<sub>2</sub>) = 0.202</p>
<p>f'(x<sub>2</sub>) = 7.266</p>
<p>x<sub>3</sub> = 1.633</p>
<p>Error = 0.017</p>
<p>Since error is less than specific limit</p>
<p>Root = 1.605</p>
<p>Therefore, Root of the equation is 1.605</p>
<p>&nbsp;</p>
<p><strong>Drawback of Newton-Rapson Method:</strong></p>
<ol style="list-style-type:decimal;">
<li>It&#8217;s convergence is not guaranteed. So, sometimes, for given equation and for given guess we may not get solution.</li>
<li>Division by zero problem can occur.</li>
<li>Root jumping might take place thereby not getting intended solution.</li>
<li>Inflection point issue might occur.</li>
<li>Symbolic derivative is required.</li>
<li>In case of multiple roots, this method converges slowly.</li>
<li>Near local maxima and local minima, due to oscillation, its convergence is slow.</li>
</ol>
</div>
<h3>Question 2</h3>
<div><p><p>How interpolation differs from regression? Write down algorithm and program for Lagrange interpolation.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><strong>Difference between regression and interpolation:</strong></p>
<p>In interpolation, We are given with some data points, and we are supposed to find a curve which fits the input/output relationship perfectly. In case of interpolation, We don&#8217;t have to worry about variance of the fitted curve.</p>
<p>When we do regression, We look for a function that minimizes some cost, usually sum of squares of errors. We don&#8217;t require the function to have the exact values at given points. We just a good approximation.</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="wp-image-4660 size-full aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/12/interpolation-vs-regression.jpg?resize=1500%2C500&#038;ssl=1" alt="Difference between regression and interpolation" width="1500" height="500" srcset="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/12/interpolation-vs-regression.jpg?w=1500&amp;ssl=1 1500w, https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/12/interpolation-vs-regression.jpg?resize=1024%2C341&amp;ssl=1 1024w, https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/12/interpolation-vs-regression.jpg?resize=768%2C256&amp;ssl=1 768w" sizes="auto, (max-width: 1000px) 100vw, 1000px" /></p>
<p><strong>Algorithm for Lagrange Interpolation</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">1. Start
2. Read number of points, say n
3. Read the value at which value is needed, say x
4. Read given data points
5. calculate values of Li as below
    for i = 1 to n
        for j = 1 to n
            if(j != i)
                L[i] = L[i] * ((x - x[j]) / (x[i]-x[j]))
            End if
        End for
     End for
6. Calculae interpolated value at x as below
    For i = 1 to n
        v = v + fx[i] * Lx[i]
    End for
7. Print the interpolated value of v at x
8. End</pre>
<p><strong>Program:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">#include&lt;stdio.h&gt;

int main(){
    int n,i,j;
    float x, l, v=0, ax[10], fx[10], L[10];
    printf("Enter the number of points\n");
    scanf("%d", &amp;n);

    printf("Enter the value of x \n");
    scanf("%f", &amp;x);

    for(i = 0; i&lt;n; i++){
        printf("Enter the value of x and fx at i = %d\n", i);
        scanf("%f%f", &amp;ax[i], &amp;fx[i]);
    }

    for(i = 0; i &lt; n; i++){
        l = 1.0;
        for(j = 0; j &lt; n; j++){
            if( j != i ){
                l = l * ((x - ax[j]) / (ax[i] - ax[j]));
            }
        }
        L[i] = l;
    }

    for(i = 0; i&lt;n; i++){
        v = v + fx[i] * L[i];
    }

    printf("Interpolated value = %f", v);
    return 0;
}</pre>
</div>
<h3>Question 3</h3>
<div><p><p>Why partial pivoting is used with Naive Gauss Elimination method? Solve the following system of equations using Gauss Elimination method with partial pivoting? How Gauss Jordan method differs from Gauss elimination method?</p>
<p>2x + 2y – z = 6</p>
<p>4x + 2y + 3z = 4</p>
<p>x + y + z = 0</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Round off errors were large in case of Native Gauss Elimination method. We need partial pivoting in Native Gauss Elimination method because of the following reasons:</p>
<ol style="list-style-type:decimal;">
<li>To avoid division by zero problem</li>
<li>To reduce round-off errors</li>
</ol>
<p>&nbsp;</p>
<p><strong>Problem Part:</strong></p>
<p>Solution:</p>
<p>Given equations are</p>
<p>2x + 2y – z = 6</p>
<p>4x + 2y + 3z = 4</p>
<p>x + y + z = 0</p>
<p>Representing above equations in matrix form, we get</p>
<p>\(\begin{bmatrix}2 &amp; 2 &amp; -1\\ 4 &amp; 2 &amp; 3\\ 1 &amp; 1 &amp; 1 \end{bmatrix}\begin{bmatrix} x\\ y\\ z \end{bmatrix} = \begin{bmatrix}6\\ 4\\ 0\end{bmatrix}\)</p>
<p><strong>Forward Elimination of Unknown</strong></p>
<p><strong><u>Step 1</u></strong></p>
<p>Since, largest absolute value among a<sub>11</sub>, a<sub>12</sub>, and a<sub>13</sub> is 4, switch Row 1 and Row 2. The matrix is</p>
<p>\(\begin{bmatrix}4 &amp; 2 &amp; 3\\ 2 &amp; 2 &amp; -1\\ 1 &amp; 1 &amp; 1 \end{bmatrix}\begin{bmatrix} x\\ y\\ z \end{bmatrix} = \begin{bmatrix}4\\ 6\\ 0\end{bmatrix}\)</p>
<p>Now, Perform \(R_2 \rightarrow 2R_2 &#8211; R_1\) and \(R_3 \rightarrow 4R_3 &#8211; R_1\)</p>
<p>\(\begin{bmatrix}4 &amp; 2 &amp; 3\\ 0 &amp; 2 &amp; -5\\ 0 &amp; 2 &amp; 1 \end{bmatrix}\begin{bmatrix} x\\ y\\ z \end{bmatrix} = \begin{bmatrix}4\\ 8\\ -4\end{bmatrix}\)</p>
<p><strong><u>Step 2:</u></strong></p>
<p>Since, largest absolute value among a<sub>22</sub>, a<sub>23</sub> is 2, so we do not need to switch rows.</p>
<p>\(\begin{bmatrix}4 &amp; 2 &amp; 3\\ 0 &amp; 2 &amp; -5\\ 0 &amp; 0 &amp; -6 \end{bmatrix}\begin{bmatrix} x\\ y\\ z \end{bmatrix} = \begin{bmatrix}4\\ 8\\ 12\end{bmatrix}\)</p>
<p>This is the end of the forward elimination steps.</p>
<p><strong>Back substitution:</strong></p>
<p>We can now solve the above equations by back substitution. From the third row,</p>
<p class="ql-align-center">z = -2</p>
<p>Substituting the value of z in second row,</p>
<p class="ql-align-center">2y &#8211; 5z = 8</p>
<p class="ql-align-center">2y + 10 = 8</p>
<p class="ql-align-center">2y = -2</p>
<p class="ql-align-center">y = -1</p>
<p>Substituting the value of y and z in first row,</p>
<p class="ql-align-center">4x + 2y + 3z = 4</p>
<p class="ql-align-center">4x = 12</p>
<p class="ql-align-center">x = 3</p>
<p>Hence, the solution is</p>
<p>[x] = \(\begin{bmatrix} x\\ y\\ z\end{bmatrix}\) = \(\begin{bmatrix} 3\\ -1\\ -2\end{bmatrix}\)</p>
<p>&nbsp;</p>
<p>The difference between Gauss-Jordan and Gauss Elimination are</p>
<div class="table_wrapper" style="overflow-x:auto;"><table>
<thead>
<tr>
<th>SN</th>
<th>Gauss Elimination Method</th>
<th>Gauss Jordan Method</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>In this method, the unknowns are eliminated successively and the system is reduced to an upper triangular system from which the unknowns are found by back substitution.</td>
<td>In this method, elimination of unknowns is performed  by all equations not only from equations to follow. Thus the system ultimately reduces to a diagonal matrix form i.e. each equation involving only one unknowns.</td>
</tr>
<tr>
<td>2.</td>
<td>Finding the solution of n simultaneous linear equation, the number of multiplications and divisions are of the order. n3/3.</p>
<p><strong>For Example:</strong></p>
<p>if n=5, the number of multiplications and divisions ISI elimination is approximately 42.</td>
<td>Finding the solution of n simultaneous linear equation, the number of multiplications and divisions are of the order. n3/2.</p>
<p><strong>For Example:</strong></p>
<p>if n=5, the number of multiplications and divisions are approximately 62.</td>
</tr>
<tr>
<td>3.</td>
<td>It does not seem to be easier but requires about 50 percent fewer operations than Gauss Jordan Method.</td>
<td>It seems to be easier but requires about 50 percent fewer operations than Gauss elimination  Method.</td>
</tr>
<tr>
<td>4.</td>
<td>For large systems, Gauss Elimination Method is not preferred.</td>
<td>For large systems, Gauss Jordan Method is preferred to Gauss Elimination Method</td>
</tr>
</tbody>
</table></div>
</div>
<h2>Group B: Attempt any eight questions:(5 x 8 = 40)</h2><h3>Question 4</h3>
<div><p><p>Define the terms true error and relative error? Use Horner’ method to evaluate polynomial \(2x^3 – 3x^2 + 5x – 2\) at x = 3 and write down its algorithm.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><strong>True Error</strong> is denoted by E is the difference between the true value and the approximate value.</p>
<p class="ql-align-center">True Error = True Value &#8211; Approximate value</p>
<p><strong>Relative Error</strong> is denoted by E<sub>r</sub> and is defined as the ratio between the true error and true value.</p>
<p class="ql-align-center">\(Relative \enspace True \enspace Error = \frac{True \enspace Error}{True \enspace Value}\)</p>
<p>&nbsp;</p>
<p><strong>Solution:</strong></p>
<p>We know that</p>
<p>a3 = 2, a2 = -3, a1 = 5, a0 = 2</p>
<p>Now, now sequence of constants can be determined by using recursive function as below:</p>
<p>b3 = a3 = 2</p>
<p>b2 = a2 + b3 * x = -3 + 2 * 3 = 3</p>
<p>b1 = a1 + b2 * x = 5 + 3 * 3 = 14</p>
<p>b0 = a0 + b1 * x = -2 + 14 * 3 = 40</p>
<p>Thus, p(3) = 40</p>
<p><strong>Algorithm of Horner&#8217;s Method:</strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">1. Start
2. Enter degree of polynomial, say n
3. Enter the value at which polynomial to be evaluated, x
4. Initially set bn = an
5. while n &gt; 0
     bn-1 = an-1 + bn * x
6. End While
7. Display the value of b0, which is the value of the polynomial at x
8. End</pre>
</div>
<h3>Question 5</h3>
<div><p><p>Construct Newton’s forward difference table for the given data points and approximate the value of f(x) at x = 15.</p>
<div class="table_wrapper"><table>
<tbody>
<tr>
<td>x</td>
<td>10</td>
<td>20</td>
<td>30</td>
<td>40</td>
<td>50</td>
</tr>
<tr>
<td>F(x)</td>
<td>0.173</td>
<td>0.342</td>
<td>0.5</td>
<td>0.643</td>
<td>0.766</td>
</tr>
</tbody>
</table></div</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-18108" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/11/ans.jpg?resize=670%2C529&#038;ssl=1" alt="" width="670" height="529"></p>
</div>
<h3>Question 6</h3>
<div><p><p>Fit the curve \(y = ae^{bx}\) through the following data points.</p>
<div class="table_wrapper"><table>
<tbody>
<tr>
<td>x</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>y</td>
<td>1.65</td>
<td>2.70</td>
<td>4.50</td>
<td>7.35</td>
</tr>
</tbody>
</table></div</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-23696" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2022/01/SmartSelect_20230822_153506_CamScanner.jpg?resize=909%2C1146&#038;ssl=1" alt="" width="909" height="1146"></p>
</div>
<h3>Question 7</h3>
<div><p><p>Discuss the Doolittle LU decomposition method for matrix factorization.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>In the Doolittle algorithm, we will factor the matrix in the form of multiplication of a lower triangular matrix and upper triangular matrix in the case of numerical analysis and linear analysis. With the help of LU decomposition, computers can be solved the square systems of linear equations. At the time of computing the determinant of matrix or inverting a matrix, this will be a key step.</p>
<p>Suppose there is a square matrix which is indicated by A. An LU factorization can be described as the factorization of A with proper column and/or rows permutation or order, which will be divided into two factors, i.e., a lower triangular matrix, which is represented by L, and an upper triangular matrix, which is represented by U. So A = LU.</p>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/static.javatpoint.com/tutorial/dms/images/doolittle-algorithm-lu-decomposition.png?ssl=1" alt="Doolittle Algorithm: LU Decomposition" /></p>
<p><strong>Example:</strong></p>
<p>X<sub>1</sub> + X<sub>2</sub> + X<sub>3</sub>= 5</p>
<div id="26aba3e6-5491-4b7c-9d3c-fd3ec7ea1b89" class="_ap_apex_ad" style="display: block; clear: both; text-align: center; margin: 10px auto; width: 0px; height: 0px; overflow: hidden;" data-section="26aba3e6-5491-4b7c-9d3c-fd3ec7ea1b89" data-xpath="#city &gt; table:eq(0) &gt; tbody:eq(0) &gt; tr:eq(0) &gt; td:eq(0) &gt; p:eq(28)" data-section-id="" data-ap-network="adpTags" data-render-time="1685620363874" data-refresh-time="1685620508891" data-timeout="4163">
<div id="ADP_37780_728X280_26aba3e6-5491-4b7c-9d3c-fd3ec7ea1b89" data-google-query-id="CM201pqBov8CFQ1FnQkdyI0OHA">
<div id="google_ads_iframe_/103512698,22511567001/22921927648_0__container__"></div>
</div>
</div>
<p>X<sub>1</sub> + 2X<sub>2</sub> + 2X<sub>3</sub> = 6</p>
<p>X<sub>1</sub> + 2X<sub>2</sub>+ 3X<sub>3</sub> = 8</p>
<p><strong>Solution:</strong></p>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/static.javatpoint.com/tutorial/dms/images/doolittle-algorithm-lu-decomposition9.png?ssl=1" alt="Doolittle Algorithm: LU Decomposition" /></p>
<p>Suppose A = LU. So,</p>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/static.javatpoint.com/tutorial/dms/images/doolittle-algorithm-lu-decomposition10.png?ssl=1" alt="Doolittle Algorithm: LU Decomposition" /></p>
<p>Suppose Ly = B</p>
<div id="e6b752e6-50ac-4a29-ba37-21a6ae901ff4" class="_ap_apex_ad" style="display: block; clear: both; text-align: center; margin: 10px auto; width: 0px; height: 0px; overflow: hidden;" data-section="e6b752e6-50ac-4a29-ba37-21a6ae901ff4" data-xpath="#city &gt; table:eq(0) &gt; tbody:eq(0) &gt; tr:eq(0) &gt; td:eq(0) &gt; p:eq(33)" data-section-id="" data-ap-network="adpTags" data-render-time="1685620363900" data-refresh-time="1685620511931" data-timeout="4429">
<div id="ADP_37780_728X280_e6b752e6-50ac-4a29-ba37-21a6ae901ff4" data-google-query-id="CNK01pqBov8CFQ1FnQkdyI0OHA">
<div id="google_ads_iframe_/103512698,22511567001/22921927621_0__container__"></div>
</div>
</div>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/static.javatpoint.com/tutorial/dms/images/doolittle-algorithm-lu-decomposition11.png?ssl=1" alt="Doolittle Algorithm: LU Decomposition" /></p>
<p>Y<sub>1</sub> = 5</p>
<p>Y<sub>1</sub> + Y<sub>2</sub> = 6; Y<sub>2</sub> = 1</p>
<p>Y<sub>1</sub> + Y<sub>2</sub> + Y<sub>3</sub> = 8; Y<sub>3</sub> = 2</p>
<p>Y<sub>1</sub> = 5 Y<sub>2</sub> = 1 Y<sub>3</sub> = 2</p>
<p>Suppose Ux = Y</p>
<p><img data-recalc-dims="1" decoding="async" src="https://i0.wp.com/static.javatpoint.com/tutorial/dms/images/doolittle-algorithm-lu-decomposition12.png?ssl=1" alt="Doolittle Algorithm: LU Decomposition" /></p>
</div>
<h3>Question 8</h3>
<div><p><p>Write down algorithm and program for the differentiating continuous function using three point formula.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><span style="text-decoration: underline;"><strong>Algorithm:</strong></span></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">1. Start
2. Read the value at which derivative is needed, say x
3. Read interval gap, say h
4. Calculate f(x) and g(xi+h)
5. Calculate d = f'(xi) = (f(xi + h) - f(xi - h)) / 2h
6. Display the value of derivative
7. Stop</pre>
<p><span style="text-decoration: underline;"><strong>Code:</strong></span></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">#include&lt;stdio.h&gt;
#include&lt;math.h&gt;

#define PI 3.1415
#define f(x) = sin(x) + 1

int main(){

    float angle, h, x, d;
    printf("Enter Angle in Degree: ");
    scanf("%f", &amp;angle);
    printf("\nEnter increment: ");
    scanf("%f", &amp;h);
    x = PI / 180 * angle;
    d = (f(x + h) - f(x - h)) / 2h;
    printf("The value of derivative: %f", d);
    return 0;
}</pre>
</div>
<h3>Question 9</h3>
<div><p><p>How Simpson’s 1/3 rule differs from Trapezoidal rule? Drive the formula for Simson’s 1/3 rule.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><span style="text-decoration: underline;"><strong>Difference Between Trapezoidal and Simpson Rule:</strong></span></p>
<p>The trapezoidal rule is based on the Newton-Cotes formula. The trapezoidal rule works by approximating the region under the graph of the function f(x) as a trapezoidal and calculate its area. The trapezoidal rule assumes n = 1. That is, it approximates the integral by a linear polynomial (straight line).</p>
<div class="mathjax_wrap" style="text-align: center;">\(\int_{x_0}^{x_1}f(x) dx = (x_1 &#8211; x_0)\left [ \frac{f(x_1) + f(x_0)}{2} \right ]\)</div>
<p>This is called trapezoidal rule and it is the area of the trapezoid whose width is (x<sub>1</sub> &#8211; x<sub>0</sub>) and height is the average of f(x<sub>0</sub>) and f(x<sub>1</sub>)</p>
<p>Simpson&#8217;s 1/3 is an extension of trapezoidal rule where the integrand is approximated by a second order polynomial. The Simpson&#8217;s 1/3 rule assumes n = 2.</p>
<div class="mathjax_wrap" style="text-align: center;">\(I = \int_{x_0}^{x_2}f(x) dx = \frac{h}{3} [f(x_0) + 4f(x_1) + f(x_2)]\)</div>
<p>This is called Simpson&#8217;s 1/3 rule.</p>
<p><span style="text-decoration: underline;"><strong>Derivation of Simpson&#8217;s 1/3:</strong></span></p>
<p>General quadrature formula for integration is given by</p>
<div class="mathjax_wrap">\(\int_{a}^{b}f(x)dx = \int_{x_0}^{x_0+nh}f(x)dx = nh\left [ f(x_0) + \frac{n}{2} Δf(x_0) + \frac{1}{12}(2n^2-3n)Δ^2f(x_0) + \frac{1}{24}(n^3-4n^2+4n)Δ^3f(x_0) + &#8230;&#8230; \right ]\)</div>
<p>Here, \(h = \frac{b-a}{n}\)</p>
<p>By putting n = 2 in the above relation and neglecting higher order forward difference written as</p>
<div class="mathjax_wrap">\(\int_{x_0}^{x_0 + nh}f(x)dx = \int_{x_0}^{x_2}f(x)dx = 2h\left [ f(x_0) + Δf(x_0) + \frac{1}{6}Δ^2f(x_0) \right ]\)</div>
<div class="mathjax_wrap">\(= 2h\left [ f(x_0) + (f(x_1) &#8211; f(x_0)) + \frac{1}{6}(f(x_0) &#8211; 2f(x_1) + f(x_2)) \right ]\)</div>
<div class="mathjax_wrap">\(= h\left [ 2f(x_0) + 2(f(x_1) &#8211; f(x_0)) + \frac{1}{3}(f(x_0) &#8211; 2f(x_1) + f(x_2)) \right ]\)</div>
<div class="mathjax_wrap" style="text-align: left;">\(I = \int_{x_0}^{x_2}f(x) dx = \frac{h}{3} [f(x_0) + 4f(x_1) + f(x_2)]\)</div>
<p>This is called Simpson&#8217;s 1/3 rule.</p>
</div>
<h3>Question 10</h3>
<div><p><p>Appropriate the solution of y’ = 2x + y , y(0) =<i> </i>1 using Euler’s method with step size 0.1. Approximate the value of y(0.4).</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p>Here, Given</p>
<p>f(x, y)  = 2x + y</p>
<p>y(0) = 1</p>
<p>x0 = 0 and y0 =  1</p>
<p>Step-size (h) = 0.1</p>
<p>x<sub>1</sub> = x0 + h = 0.1</p>
<p>x<sub>2</sub> = 0.2</p>
<p>x<sub>3</sub> = 0.3</p>
<p>x<sub>4</sub> = 0.4</p>
<p>We know by Euler&#8217;s method</p>
<p>y(x<sub>i</sub> + 1) = y(x<sub>i</sub>) + h(f(x<sub>i</sub> , y<sub>i</sub>))</p>
<p><span style="text-decoration: underline;"><strong>Step 1:</strong></span></p>
<p>y(x1) = y(x0) + hf(x0, y0)</p>
<p>y(0.1) = y(0) + hf(0.1)</p>
<p>= 1 + 0.1 x 1</p>
<p>= 1.1</p>
<p>(x1, y1) = (0.1, 1.1)</p>
<p><span style="text-decoration: underline;"><strong>Step 2:</strong></span></p>
<p>y(x2) = y(x1) + hf(x1, y1)</p>
<p>y(0.2) = y(o.1) + 0.1 f(0.1, 1.1)</p>
<p>= 1.1 + 0.1 x 1.2</p>
<p>= 1.1 + 1.13</p>
<p>= 1.23</p>
<p>(x2, y2) = (0.2, 1.23)</p>
<p><span style="text-decoration: underline;"><strong>Step 3:</strong></span></p>
<p>y(x3) = y(x2) + hf(x2, y2)</p>
<p>y(0.3) = y(0.2) + 0.1 f(0.2, 1.23)</p>
<p>= 1.23 + 0.1 x (2 x 0.2 + 1.23)</p>
<p>= 1.303</p>
<p>(x3, y3) = (0.3, 1.393)</p>
<p><span style="text-decoration: underline;"><strong>Step 4:</strong></span></p>
<p>y(x4) = y(x3) + hf(x3, y3)</p>
<p>y(0.4) = y(0.3) + 0.1 x (2 x 0.3 + 1.393)</p>
<p>= 1.393 + 0.1 (2 x 0.3 + 1.393)</p>
<p>= 1.5923</p>
<p>Thus y(0.4) = 1.5923</p>
</div>
<h3>Question 11</h3>
<div><p><p>A plate of dimension 18cm x 18cm is subjected to temperatures as follows: left side at \(100^{0}c\), right side at \(200^{0}c\). Upper part at \(50^{0}c\), and lower at \(150^{0}c\). If square grid length of 6cm x 6cm is assumed, what will be the temperature at the interior nodes?</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><p><strong>Solution:</strong></p>
<p>Since height and weight of gird is same</p>
<p>h = k = 0.8m</p>
<p>The nodes are shown in Figure below:</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="wp-image-4748 aligncenter" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2022/01/main_img.jpg?resize=309%2C309&#038;ssl=1" alt="" width="309" height="309"></p>
<p>Now to get the temperature at the interior nodes we have to write Equation for all the combinations of i and j, i = 1, &#8230;&#8230;., m; j = 1, &#8230;&#8230;., n-1</p>
<p><span style="text-decoration: underline;">For u<sub>1</sub>:</span></p>
<p>u<sub>3</sub> + u<sub>2</sub> + 75 + 50 &#8211; 4u<sub>1</sub> = 0    &#8212;&#8212;&#8212;-(1)</p>
<p>-4u<sub>1</sub> + u<sub>2</sub> + u<sub>3</sub> = -125</p>
<p><span style="text-decoration: underline;">For u<sub>2</sub>:</span></p>
<p>u<sub>4</sub> + u<sub>3</sub> + 100 + 50 &#8211; 4u<sub>2</sub> = 0   &#8212;&#8212;&#8212;-(2)</p>
<p>u<sub>1</sub> &#8211; 5u<sub>2</sub> + u<sub>4</sub> = -150</p>
<p><span style="text-decoration: underline;">for u<sub>3</sub>:</span></p>
<p>u<sub>4</sub> + u<sub>1</sub> + 300 + 75 &#8211; 4u<sub>3</sub> = 0   &#8212;&#8212;&#8212;-(3)</p>
<p>u<sub>1</sub> + u<sub>4</sub> &#8211; 4u<sub>3</sub> = -375</p>
<p><span style="text-decoration: underline;">For u<sub>4</sub>:</span></p>
<p>u<sub>2</sub> + u<sub>3</sub> + 300 + 100 &#8211; 4u<sub>4</sub> = 0   &#8212;&#8212;&#8212;-(4)</p>
<p>u<sub>2</sub> + u<sub>3</sub> &#8211; 4u<sub>4</sub> = -400</p>
<p>Equations (1) to (4) represent a set of four simultaneously linear equations, which is given below:</p>
<p>-4u<sub>1 </sub> + u<sub>2</sub> + u<sub>3</sub> = -125</p>
<p>u<sub>1</sub> &#8211; 4u<sub>2</sub> + u<sub>4</sub> = -150</p>
<p>u<sub>1</sub> + u<sub>4</sub> &#8211; 4u<sub>3</sub> = -375</p>
<p>u<sub>2</sub> + u<sub>3</sub> &#8211; 4u<sub>4</sub> = -400</p>
<p>Now,</p>
<p>\(u_1 = \frac{u_2 + u_3 + 125}{4}\)</p>
<p>\(u_2 = \frac{u_1 + u_4 + 150}{4}\)</p>
<p>\(u_3 = \frac{u_1 + u_4 + 375}{4}\)</p>
<p>\(u_4 = \frac{u_2 + u_3 + 400}{4}\)</p>
<p>Solving above equations by using Gauss-Seidel method with initial guess u<sub>2</sub> = 0, u<sub>3</sub> = 0, u<sub>4</sub> = 0, we get</p>
<div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%;">
<tbody>
<tr>
<td style="width: 20%; text-align: center;"><strong>Values →</strong><br />
<strong>Iteration ↓</strong></td>
<td style="width: 20%; text-align: center;"><strong>u<sub>1</sub></strong></td>
<td style="width: 20%; text-align: center;"><strong>u<sub>2</sub></strong></td>
<td style="width: 20%; text-align: center;"><strong>u<sub>3</sub></strong></td>
<td style="width: 20%; text-align: center;"><strong>u<sub>4</sub></strong></td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>1</strong></td>
<td style="width: 20%; text-align: center;">31.25</td>
<td style="width: 20%; text-align: center;">45.313</td>
<td style="width: 20%; text-align: center;">101.563</td>
<td style="width: 20%; text-align: center;">136.719</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>2</strong></td>
<td style="width: 20%; text-align: center;">67.969</td>
<td style="width: 20%; text-align: center;">88.672</td>
<td style="width: 20%; text-align: center;">144.922</td>
<td style="width: 20%; text-align: center;">158.398</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>3</strong></td>
<td style="width: 20%; text-align: center;">89.648</td>
<td style="width: 20%; text-align: center;">99.512</td>
<td style="width: 20%; text-align: center;">155.762</td>
<td style="width: 20%; text-align: center;">163.818</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>4</strong></td>
<td style="width: 20%; text-align: center;">95.068</td>
<td style="width: 20%; text-align: center;">102.222</td>
<td style="width: 20%; text-align: center;">158.472</td>
<td style="width: 20%; text-align: center;">165.173</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>5</strong></td>
<td style="width: 20%; text-align: center;">96.423</td>
<td style="width: 20%; text-align: center;">102.899</td>
<td style="width: 20%; text-align: center;">159.149</td>
<td style="width: 20%; text-align: center;">165.512</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>6</strong></td>
<td style="width: 20%; text-align: center;">96.762</td>
<td style="width: 20%; text-align: center;">103.069</td>
<td style="width: 20%; text-align: center;">159.319</td>
<td style="width: 20%; text-align: center;">165.597</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>7</strong></td>
<td style="width: 20%; text-align: center;">96.847</td>
<td style="width: 20%; text-align: center;">103.111</td>
<td style="width: 20%; text-align: center;">159.361</td>
<td style="width: 20%; text-align: center;">165.618</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>8</strong></td>
<td style="width: 20%; text-align: center;">96.868</td>
<td style="width: 20%; text-align: center;">103.121</td>
<td style="width: 20%; text-align: center;">159.371</td>
<td style="width: 20%; text-align: center;">165.623</td>
</tr>
<tr>
<td style="width: 20%; text-align: center;"><strong>9</strong></td>
<td style="width: 20%; text-align: center;">96.873</td>
<td style="width: 20%; text-align: center;">103.124</td>
<td style="width: 20%; text-align: center;">159.374</td>
<td style="width: 20%; text-align: center;">165.625</td>
</tr>
</tbody>
</table></div>
<p>Thus,</p>
<p>u<sub>1</sub> = 96.873</p>
<p>u<sub>2</sub> = 103.124</p>
<p>u<sub>3</sub> = 159.374</p>
<p>u<sub>4</sub> = 165.625</p>
</div>
<h3>Question 12</h3>
<div><p><p>How boundary value problems differs from initial value problems? Discuss shooting method for solving boundary value problem.</p</p></div><div><strong>Answer:</strong><br><style>body .mathjax_wrap{width: 100%;overflow-x: scroll;margin-bottom:10px;}</style><div class="table_wrapper" style="overflow-x:auto;"><table style="border-collapse: collapse; width: 100%;">
<tbody>
<tr>
<td style="width: 50%; text-align: center;"><strong>Initial Value Problem</strong></td>
<td style="width: 50%; text-align: center;"><strong>Boundary Value Problem</strong></td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">Needs value during the initial condition.</td>
<td style="width: 50%; text-align: center;">Needs value at the boundaries.</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">Usually applies for dynamic system.</td>
<td style="width: 50%; text-align: center;">Not necessarily used for dynamic system.</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">Real world Example:</p>
<p>To solve a particle position under differential equation, we need the initial position and also initial velocity. Without these initial values, we cannot determine the final position from the equation.</td>
<td style="width: 50%; text-align: center;">Real world Example:</p>
<p>Shape from shading problem in computer vision. To determine surface gradient from the PDE, one should impose boundary values on the region of interest.</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">Some methods that work on this: Taylor&#8217;s Series, Picard&#8217;s, Euler&#8217;s, Heun&#8217;s etc.</td>
<td style="width: 50%; text-align: center;">Some methods that work on this: Shooting.</td>
</tr>
<tr>
<td style="width: 50%; text-align: center;">Example:</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-18113" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/11/ivp.jpg?resize=242%2C98&#038;ssl=1" alt="" width="242" height="98"></td>
<td style="width: 50%; text-align: center;">Example:<img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-18114" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/11/bvp.jpg?resize=418%2C102&#038;ssl=1" alt="" width="418" height="102"></td>
</tr>
</tbody>
</table></div>
<p>&nbsp;</p>
<p>Shooting Method:</p>
<p>It is used to solve the higher-order differential with boundary values.</p>
<p><img data-recalc-dims="1" loading="lazy" decoding="async" class="alignnone size-full wp-image-18116" src="https://i0.wp.com/hamrocsit.com/wp-content/uploads/2021/11/shoot.jpg?resize=580%2C552&#038;ssl=1" alt="" width="580" height="552"></p>
<p>&nbsp;</p>
</div>
</body></html>